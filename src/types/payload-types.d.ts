/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export type ListPart = {
  title: string;
  textEditor?: {
    [k: string]: unknown;
  }[];
  id?: string;
}[];

export interface Config {
  collections: {
    pages: Page;
    media: Media;
    theme_colors: ThemeColor;
    users: User;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    site_options: SiteOption;
  };
}
export interface Page {
  id: string;
  title?: string;
  sections?: (SectionSection | SectionRow | SectionColumns)[];
  slug?: string;
  updatedAt: string;
  createdAt: string;
}
export interface SectionSection {
  blocks?: (
    | BlockHeading
    | BlockParagraph
    | BlockAccordion
    | BlockCard
    | BlockButtons
    | BlockTextEditor
    | BlockDivider
    | BlockImage
    | BlockQuote
    | BlockTabs
  )[];
  section_options?: SectionOptions;
  id?: string;
  blockName?: string;
  blockType: 'section';
}
export interface BlockHeading {
  size?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
  heading?: string;
  id?: string;
  blockName?: string;
  blockType: 'heading';
}
export interface BlockParagraph {
  paragraph?: string;
  id?: string;
  blockName?: string;
  blockType: 'paragraph';
}
export interface BlockAccordion {
  title?: string;
  columns?: '1' | '2' | '3' | '4';
  list?: ListPart;
  id?: string;
  blockName?: string;
  blockType: 'accordion';
}
export interface BlockCard {
  title?: string;
  subtitle?: string;
  image?: string | Media;
  textEditor?: {
    [k: string]: unknown;
  }[];
  card_color?: string | ThemeColor;
  id?: string;
  blockName?: string;
  blockType: 'card';
}
export interface Media {
  id: string;
  alt?: string;
  title?: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    thumbnail?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    small?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    medium?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface ThemeColor {
  id: string;
  name: string;
  color?: string;
  updatedAt: string;
  createdAt: string;
}
export interface BlockButtons {
  size?: 'sm' | 'md' | 'lg';
  justify?: 'flex-start' | 'center' | 'flex-end' | 'space-between' | 'space-evenly';
  buttons: {
    button: ButtonPart;
    id?: string;
  }[];
  id?: string;
  blockName?: string;
  blockType: 'buttons';
}
export interface ButtonPart {
  label: string;
  link_type?: 'page' | 'url';
  newTab?: boolean;
  page_link?: string | Page;
  url_link?: string;
  icon?: string;
  style?: 'primary' | 'secondary';
  color?: string | ThemeColor;
}
export interface BlockTextEditor {
  textEditor?: {
    [k: string]: unknown;
  }[];
  id?: string;
  blockName?: string;
  blockType: 'textEditor';
}
export interface BlockDivider {
  height: number;
  color?: string | ThemeColor;
  id?: string;
  blockName?: string;
  blockType: 'divider';
}
export interface BlockImage {
  justify: 'left' | 'center' | 'right';
  align: 'flex-start' | 'center' | 'flex-end';
  fill?: boolean;
  image: string | Media;
  id?: string;
  blockName?: string;
  blockType: 'image';
}
export interface BlockQuote {
  text: string;
  source?: string;
  color?: string | ThemeColor;
  id?: string;
  blockName?: string;
  blockType: 'quote';
}
export interface BlockTabs {
  list?: ListPart;
  id?: string;
  blockName?: string;
  blockType: 'tabs';
}
export interface SectionOptions {
  width?: 'container' | 'container-sm' | 'container-full' | 'container-bleed';
  padding?: 'top_bottom' | 'top' | 'bottom' | 'none';
  bg_color?: string | ThemeColor;
  variant?: string;
  anchor?: string;
}
export interface SectionRow {
  columns?: '1' | '2';
  layout?: '6_6' | '5_7' | '7_5' | '4_8' | '8_4' | '3_9' | '9_3';
  col_1_blocks?: (
    | BlockHeading
    | BlockParagraph
    | BlockAccordion
    | BlockCard
    | BlockButtons
    | BlockTextEditor
    | BlockDivider
    | BlockImage
    | BlockQuote
  )[];
  col_2_blocks?: (
    | BlockHeading
    | BlockParagraph
    | BlockAccordion
    | BlockCard
    | BlockButtons
    | BlockTextEditor
    | BlockDivider
    | BlockImage
    | BlockQuote
  )[];
  section_options?: SectionOptions;
  id?: string;
  blockName?: string;
  blockType: 'row';
}
export interface SectionColumns {
  blocks?: (
    | BlockHeading
    | BlockParagraph
    | BlockAccordion
    | BlockCard
    | BlockButtons
    | BlockTextEditor
    | BlockDivider
    | BlockImage
  )[];
  column_options?: ColumnOptions;
  section_options?: SectionOptions;
  id?: string;
  blockName?: string;
  blockType: 'columns';
}
export interface ColumnOptions {
  columns?: '2' | '3' | '4' | '5' | '6';
  justify?: 'flex-start' | 'center' | 'flex-end' | 'stretch';
}
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password: string;
}
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
export interface PayloadMigration {
  id: string;
  name?: string;
  batch?: number;
  updatedAt: string;
  createdAt: string;
}
export interface SiteOption {
  id: string;
  data: {
    org_name: string;
    title: string;
    description: string;
    favicon?: string | Media;
    meta_image?: string | Media;
    host_name?: string;
    ga_id?: string;
    gtm_id?: string;
  };
  header?: {
    logo?: string | Media;
    nav?: {
      page?: string | Page;
      label?: string;
      has_sublinks?: boolean;
      sublinks?: {
        page: string | Page;
        label?: string;
        id?: string;
      }[];
      id?: string;
    }[];
  };
  footer?: {
    logo?: string | Media;
    copywrite_year?: string;
    colophon?: string;
    footer_nav?: 'none' | 'main_nav' | 'site_map' | 'custom';
    footer_links?: {
      label: string;
      link_type?: 'page' | 'url';
      newTab?: boolean;
      page_link?: string | Page;
      url_link?: string;
      id?: string;
    }[];
  };
  contact?: {
    name?: string;
    email?: string;
    phone?: string;
    address_street?: string;
    address_street_2?: string;
    address_city?: string;
    address_state?: string;
    zip_code?: string;
  };
  updatedAt?: string;
  createdAt?: string;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}